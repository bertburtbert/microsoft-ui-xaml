//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           7.0.0-build.57+g2cc4f0c931
//       
//       Command:
//           LottieGen -Language Cppwinrt -Namespace MU_XC_NAMESPACE -InputFile Controls_01_Checkmark.json
//       
//       Input file:
//           Controls_01_Checkmark.json (10205 bytes created 11:08-08:00 Nov 18 2020)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ____________________________________
// |       Object stats       | Count |
// |__________________________|_______|
// | All CompositionObjects   |   137 |
// |--------------------------+-------|
// | Expression animators     |    27 |
// | KeyFrame animators       |    21 |
// | Reference parameters     |    31 |
// | Expression operations    |    24 |
// |--------------------------+-------|
// | Animated brushes         |     6 |
// | Animated gradient stops  |     - |
// | ExpressionAnimations     |     7 |
// | PathKeyFrameAnimations   |     - |
// |--------------------------+-------|
// | ContainerVisuals         |     1 |
// | ShapeVisuals             |     1 |
// |--------------------------+-------|
// | ContainerShapes          |     4 |
// | CompositionSpriteShapes  |     7 |
// |--------------------------+-------|
// | Brushes                  |     6 |
// | Gradient stops           |     - |
// | CompositionVisualSurface |     - |
// ------------------------------------
#include "pch.h"
#include "Controls_01_Checkmark.h"
#include <winrt/Windows.Foundation.Metadata.h>
#include <winrt/Windows.UI.Composition.h>
#include "d2d1.h"
#include <d2d1_1.h>
#include <d2d1helper.h>
#include <Windows.Graphics.Interop.h>
#include <winrt/Windows.Graphics.Effects.h>

using namespace winrt::Windows::Foundation;
using namespace winrt::Windows::Foundation::Numerics;
using namespace winrt::Windows::Graphics;
using namespace winrt::Windows::UI;
using namespace winrt::Windows::UI::Composition;
using TimeSpan = winrt::Windows::Foundation::TimeSpan;

namespace winrt::Microsoft::UI::Xaml::Controls
{
    CppWinRTActivatableClassWithBasicFactory(Controls_01_Checkmark);
}
#include "Controls_01_Checkmark.g.cpp"

    class CanvasGeometry : public winrt::implements<CanvasGeometry,
        IGeometrySource2D,
        Windows::Graphics::IGeometrySource2DInterop>
    {
        winrt::com_ptr<ID2D1Geometry> _geometry{ nullptr };

    public:
        CanvasGeometry(winrt::com_ptr<ID2D1Geometry> geometry)
            : _geometry{ geometry }
        { }

        // IGeometrySource2D.
        winrt::com_ptr<ID2D1Geometry> Geometry() { return _geometry; }

        // IGeometrySource2DInterop.
        IFACEMETHODIMP GetGeometry(ID2D1Geometry** value) override
        {
            _geometry.copy_to(value);
            return S_OK;
        }

        // IGeometrySource2DInterop.
        IFACEMETHODIMP TryGetGeometryUsingFactory(ID2D1Factory*, ID2D1Geometry**) override
        {
            return E_NOTIMPL;
        }
    };
    class Controls_01_Checkmark_AnimatedVisual : public winrt::implements<Controls_01_Checkmark_AnimatedVisual,
            winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual,
            IClosable>
    {
        winrt::com_ptr<ID2D1Factory> _d2dFactory{ nullptr };
        static constexpr int64_t c_durationTicks{ 11666666L };
        Compositor const _c{ nullptr };
        ExpressionAnimation const _reusableExpressionAnimation{ nullptr };
        CompositionPropertySet const _themeProperties{ nullptr };
        CompositionColorBrush _themeColor_Foreground_0{ nullptr };
        CompositionColorBrush _themeColor_Foreground_2{ nullptr };
        CompositionColorBrush _themeColor_Foreground_3{ nullptr };
        CompositionColorBrush _themeColor_Foreground_4{ nullptr };
        CompositionColorBrush _themeColor_Foreground_5{ nullptr };
        CompositionPath _path{ nullptr };
        CompositionPathGeometry _pathGeometry_0{ nullptr };
        ContainerVisual _root{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_0{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_1{ nullptr };
        ExpressionAnimation _rootProgress{ nullptr };
        ScalarKeyFrameAnimation _scalarAnimation_0p8_to_1_0{ nullptr };
        ScalarKeyFrameAnimation _scalarAnimation_0p8_to_1_1{ nullptr };
        ScalarKeyFrameAnimation _scalarAnimation_1_to_0p8_0{ nullptr };
        ScalarKeyFrameAnimation _scalarAnimation_1_to_0p8_1{ nullptr };
        StepEasingFunction _holdThenStepEasingFunction{ nullptr };
        StepEasingFunction _stepThenHoldEasingFunction{ nullptr };

        static void StartProgressBoundAnimation(
            CompositionObject target,
            winrt::hstring animatedPropertyName,
            CompositionAnimation animation,
            ExpressionAnimation controllerProgressExpression)
        {
            target.StartAnimation(animatedPropertyName, animation);
            const auto controller = target.TryGetAnimationController(animatedPropertyName);
            controller.Pause();
            controller.StartAnimation(L"Progress", controllerProgressExpression);
        }

        void BindProperty(
            CompositionObject target,
            winrt::hstring animatedPropertyName,
            winrt::hstring expression,
            winrt::hstring referenceParameterName,
            CompositionObject referencedObject)
        {
            _reusableExpressionAnimation.ClearAllParameters();
            _reusableExpressionAnimation.Expression(expression);
            _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
            target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
        }

        void BindProperty2(
            CompositionObject target,
            winrt::hstring animatedPropertyName,
            winrt::hstring expression,
            winrt::hstring referenceParameterName0,
            CompositionObject referencedObject0,
            winrt::hstring referenceParameterName1,
            CompositionObject referencedObject1)
        {
            _reusableExpressionAnimation.ClearAllParameters();
            _reusableExpressionAnimation.Expression(expression);
            _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName0, referencedObject0);
            _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName1, referencedObject1);
            target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
        }

        ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
        {
            const auto result = _c.CreateScalarKeyFrameAnimation();
            result.Duration(TimeSpan{ c_durationTicks });
            result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
            return result;
        }

        Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, winrt::float2 initialValue, CompositionEasingFunction initialEasingFunction)
        {
            const auto result = _c.CreateVector2KeyFrameAnimation();
            result.Duration(TimeSpan{ c_durationTicks });
            result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
            return result;
        }

        CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, winrt::float3x2 transformMatrix)
        {
            const auto result = _c.CreateSpriteShape(geometry);
            result.TransformMatrix(transformMatrix);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -12.375F, 0.0F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ -4.45300007F, 8.17199993F });
            sink->AddLine({ 13.75F, -10.125F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // Color bound to theme property value: Foreground
        CompositionColorBrush ThemeColor_Foreground_0()
        {
            const auto result = _themeColor_Foreground_0 = _c.CreateColorBrush();
            BindProperty(result, L"Color", L"ColorRGB(_theme.Foreground.W*0.5,_theme.Foreground.X,_theme.Foreground.Y,_theme.Foreground.Z)", L"_theme", _themeProperties);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Check - PressedToHover
        // ShapeGroup: Shape 1
        // Color bound to theme property value: Foreground
        CompositionColorBrush ThemeColor_Foreground_1()
        {
            const auto result = _c.CreateColorBrush();
            BindProperty(result, L"Color", L"ColorRGB(_theme.Foreground.W*1,_theme.Foreground.X,_theme.Foreground.Y,_theme.Foreground.Z)", L"_theme", _themeProperties);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Check - PressedToNormal
        // ShapeGroup: Shape 1
        // Color bound to theme property value: Foreground
        CompositionColorBrush ThemeColor_Foreground_2()
        {
            const auto result = _themeColor_Foreground_2 = _c.CreateColorBrush();
            const auto propertySet = result.Properties();
            propertySet.InsertScalar(L"Opacity0", 0.5F);
            BindProperty2(result, L"Color", L"ColorRGB(_theme.Foreground.W*my.Opacity0,_theme.Foreground.X,_theme.Foreground.Y,_theme.Foreground.Z)", L"_theme", _themeProperties, L"my", propertySet);
            StartProgressBoundAnimation(propertySet, L"Opacity0", Opacity0ScalarAnimation_0p5_to_0_0(), _rootProgress);
            return result;
        }

        // - Layer aggregator
        // Layer: Check - HoverToNormal
        // Color bound to theme property value: Foreground
        CompositionColorBrush ThemeColor_Foreground_3()
        {
            const auto result = _themeColor_Foreground_3 = _c.CreateColorBrush();
            const auto propertySet = result.Properties();
            propertySet.InsertScalar(L"Opacity0", 0.5F);
            BindProperty2(result, L"Color", L"ColorRGB(_theme.Foreground.W*my.Opacity0,_theme.Foreground.X,_theme.Foreground.Y,_theme.Foreground.Z)", L"_theme", _themeProperties, L"my", propertySet);
            StartProgressBoundAnimation(propertySet, L"Opacity0", Opacity0ScalarAnimation_0p5_to_0_1(), _rootProgress);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Check - NormalToPressed
        // ShapeGroup: Shape 1
        // Color bound to theme property value: Foreground
        CompositionColorBrush ThemeColor_Foreground_4()
        {
            const auto result = _themeColor_Foreground_4 = _c.CreateColorBrush();
            const auto propertySet = result.Properties();
            propertySet.InsertScalar(L"Opacity0", 0.0F);
            BindProperty2(result, L"Color", L"ColorRGB(_theme.Foreground.W*my.Opacity0,_theme.Foreground.X,_theme.Foreground.Y,_theme.Foreground.Z)", L"_theme", _themeProperties, L"my", propertySet);
            StartProgressBoundAnimation(propertySet, L"Opacity0", Opacity0ScalarAnimation_0_to_0p5_0(), _rootProgress);
            return result;
        }

        // - Layer aggregator
        // Layer: Check - NormalToHover
        // Color bound to theme property value: Foreground
        CompositionColorBrush ThemeColor_Foreground_5()
        {
            const auto result = _themeColor_Foreground_5 = _c.CreateColorBrush();
            const auto propertySet = result.Properties();
            propertySet.InsertScalar(L"Opacity0", 0.0F);
            BindProperty2(result, L"Color", L"ColorRGB(_theme.Foreground.W*my.Opacity0,_theme.Foreground.X,_theme.Foreground.Y,_theme.Foreground.Z)", L"_theme", _themeProperties, L"my", propertySet);
            StartProgressBoundAnimation(propertySet, L"Opacity0", Opacity0ScalarAnimation_0_to_0p5_1(), _rootProgress);
            return result;
        }

        // Layer aggregator
        // Layer: Check - PressedToHover
        CompositionContainerShape ContainerShape_0()
        {
            const auto result = _c.CreateContainerShape();
            result.Scale({ 0.0F, 0.0F });
            const auto shapes = result.Shapes();
            // ShapeGroup: Shape 1
            shapes.Append(SpriteShape_0());
            // ShapeGroup: Shape 1
            shapes.Append(SpriteShape_1());
            StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_0(), _rootProgress);
            return result;
        }

        // Layer aggregator
        // Layer: Check - PressedToNormal
        CompositionContainerShape ContainerShape_1()
        {
            const auto result = _c.CreateContainerShape();
            result.Scale({ 0.0F, 0.0F });
            // ShapeGroup: Shape 1
            result.Shapes().Append(SpriteShape_2());
            StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_1(), _rootProgress);
            return result;
        }

        // Layer aggregator
        // Layer: Check - HoverToPressed
        CompositionContainerShape ContainerShape_2()
        {
            const auto result = _c.CreateContainerShape();
            result.Scale({ 0.0F, 0.0F });
            // ShapeGroup: Shape 1
            result.Shapes().Append(SpriteShape_3());
            StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_2(), _rootProgress);
            return result;
        }

        // Layer aggregator
        // Layer: Check - NormalToPressed
        CompositionContainerShape ContainerShape_3()
        {
            const auto result = _c.CreateContainerShape();
            result.Scale({ 0.0F, 0.0F });
            // ShapeGroup: Shape 1
            result.Shapes().Append(SpriteShape_5());
            StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_4(), _rootProgress);
            return result;
        }

        CompositionPath Path()
        {
            const auto result = _path = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry()));
            return result;
        }

        CompositionPathGeometry PathGeometry_0()
        {
            return _pathGeometry_0 = _c.CreatePathGeometry(Path());
        }

        // - - Layer aggregator
        // - Layer: Check - PressedToHover
        // ShapeGroup: Shape 1
        CompositionPathGeometry PathGeometry_1()
        {
            const auto result = _c.CreatePathGeometry(_path);
            StartProgressBoundAnimation(result, L"TrimEnd", TrimEndScalarAnimation_0_to_1(), _rootProgress);
            return result;
        }

        // - Layer aggregator
        // Layer: Check - PressedToHover
        // Path 1
        CompositionSpriteShape SpriteShape_0()
        {
            const auto result = _c.CreateSpriteShape(PathGeometry_0());
            result.Offset({ 24.0F, 24.0F });
            result.StrokeBrush(ThemeColor_Foreground_0());
            result.StrokeDashCap(CompositionStrokeCap::Round);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.5F);
            StartProgressBoundAnimation(result, L"Scale.X", ScalarAnimation_0p8_to_1_0(), RootProgress());
            StartProgressBoundAnimation(result, L"Scale.Y", _scalarAnimation_0p8_to_1_0, _rootProgress);
            return result;
        }

        // - Layer aggregator
        // Layer: Check - PressedToHover
        // Path 1
        CompositionSpriteShape SpriteShape_1()
        {
            const auto result = _c.CreateSpriteShape(PathGeometry_1());
            result.Offset({ 24.0F, 24.0F });
            result.StrokeBrush(ThemeColor_Foreground_1());
            result.StrokeDashCap(CompositionStrokeCap::Round);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.5F);
            StartProgressBoundAnimation(result, L"Scale.X", _scalarAnimation_0p8_to_1_0, _rootProgress);
            StartProgressBoundAnimation(result, L"Scale.Y", _scalarAnimation_0p8_to_1_0, _rootProgress);
            return result;
        }

        // - Layer aggregator
        // Layer: Check - PressedToNormal
        // Path 1
        CompositionSpriteShape SpriteShape_2()
        {
            const auto result = _c.CreateSpriteShape(_pathGeometry_0);
            result.Offset({ 24.0F, 24.0F });
            result.StrokeBrush(ThemeColor_Foreground_2());
            result.StrokeDashCap(CompositionStrokeCap::Round);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.5F);
            StartProgressBoundAnimation(result, L"Scale.X", ScalarAnimation_0p8_to_1_1(), _rootProgress);
            StartProgressBoundAnimation(result, L"Scale.Y", _scalarAnimation_0p8_to_1_1, _rootProgress);
            return result;
        }

        // - Layer aggregator
        // Layer: Check - HoverToPressed
        // Path 1
        CompositionSpriteShape SpriteShape_3()
        {
            const auto result = _c.CreateSpriteShape(_pathGeometry_0);
            result.Offset({ 24.0F, 24.0F });
            result.StrokeBrush(_themeColor_Foreground_0);
            result.StrokeDashCap(CompositionStrokeCap::Round);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.5F);
            StartProgressBoundAnimation(result, L"Scale.X", ScalarAnimation_1_to_0p8_0(), _rootProgress);
            StartProgressBoundAnimation(result, L"Scale.Y", _scalarAnimation_1_to_0p8_0, _rootProgress);
            return result;
        }

        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_4()
        {
            // Offset:<24, 24>
            const auto result = CreateSpriteShape(_pathGeometry_0, { 1.0F, 0.0F, 0.0F, 1.0F, 24.0F, 24.0F });
            result.Scale({ 0.0F, 0.0F });
            result.StrokeBrush(ThemeColor_Foreground_3());
            result.StrokeDashCap(CompositionStrokeCap::Round);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.5F);
            StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_3(), _rootProgress);
            return result;
        }

        // - Layer aggregator
        // Layer: Check - NormalToPressed
        // Path 1
        CompositionSpriteShape SpriteShape_5()
        {
            const auto result = _c.CreateSpriteShape(_pathGeometry_0);
            result.Offset({ 24.0F, 24.0F });
            result.StrokeBrush(ThemeColor_Foreground_4());
            result.StrokeDashCap(CompositionStrokeCap::Round);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.5F);
            StartProgressBoundAnimation(result, L"Scale.X", ScalarAnimation_1_to_0p8_1(), _rootProgress);
            StartProgressBoundAnimation(result, L"Scale.Y", _scalarAnimation_1_to_0p8_1, _rootProgress);
            return result;
        }

        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_6()
        {
            // Offset:<24, 24>
            const auto result = CreateSpriteShape(_pathGeometry_0, { 1.0F, 0.0F, 0.0F, 1.0F, 24.0F, 24.0F });
            result.StrokeBrush(ThemeColor_Foreground_5());
            result.StrokeDashCap(CompositionStrokeCap::Round);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.5F);
            StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_5(), _rootProgress);
            return result;
        }

        // The root of the composition.
        ContainerVisual Root()
        {
            const auto result = _root = _c.CreateContainerVisual();
            const auto propertySet = result.Properties();
            propertySet.InsertScalar(L"Progress", 0.0F);
            // Layer aggregator
            result.Children().InsertAtTop(ShapeVisual_0());
            return result;
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_0()
        {
            return _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction({ 0.166999996F, 0.166999996F }, { 0.0F, 1.0F });
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_1()
        {
            return _cubicBezierEasingFunction_1 = _c.CreateCubicBezierEasingFunction({ 0.166999996F, 0.166999996F }, { 0.833000004F, 0.833000004F });
        }

        ExpressionAnimation RootProgress()
        {
            const auto result = _rootProgress = _c.CreateExpressionAnimation(L"_.Progress");
            result.SetReferenceParameter(L"_", _root);
            return result;
        }

        // Opacity0
        ScalarKeyFrameAnimation Opacity0ScalarAnimation_0_to_0p5_0()
        {
            const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.0F, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.142857149F, 0.0F, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.214285716F, 0.5F, _cubicBezierEasingFunction_1);
            return result;
        }

        // Opacity0
        ScalarKeyFrameAnimation Opacity0ScalarAnimation_0_to_0p5_1()
        {
            const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.0F, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.128571436F, 0.5F, _cubicBezierEasingFunction_1);
            return result;
        }

        // Opacity0
        ScalarKeyFrameAnimation Opacity0ScalarAnimation_0p5_to_0_0()
        {
            const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.5F, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.571428597F, 0.5F, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.642857134F, 0.0F, CubicBezierEasingFunction_1());
            return result;
        }

        // Opacity0
        ScalarKeyFrameAnimation Opacity0ScalarAnimation_0p5_to_0_1()
        {
            const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.5F, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.285714298F, 0.5F, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.414285719F, 0.0F, _cubicBezierEasingFunction_1);
            return result;
        }

        // Scale
        ScalarKeyFrameAnimation ScalarAnimation_0p8_to_1_0()
        {
            const auto result = _scalarAnimation_0p8_to_1_0 = CreateScalarKeyFrameAnimation(0.0F, 0.800000012F, StepThenHoldEasingFunction());
            result.InsertKeyFrame(0.714285731F, 0.800000012F, HoldThenStepEasingFunction());
            result.InsertKeyFrame(0.985714257F, 1.0F, CubicBezierEasingFunction_0());
            return result;
        }

        // Scale
        ScalarKeyFrameAnimation ScalarAnimation_0p8_to_1_1()
        {
            const auto result = _scalarAnimation_0p8_to_1_1 = CreateScalarKeyFrameAnimation(0.0F, 0.800000012F, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.571428597F, 0.800000012F, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.714285731F, 1.0F, _cubicBezierEasingFunction_0);
            return result;
        }

        // Scale
        ScalarKeyFrameAnimation ScalarAnimation_1_to_0p8_0()
        {
            const auto result = _scalarAnimation_1_to_0p8_0 = CreateScalarKeyFrameAnimation(0.0F, 1.0F, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.428571433F, 1.0F, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.571428597F, 0.800000012F, _cubicBezierEasingFunction_0);
            return result;
        }

        // Scale
        ScalarKeyFrameAnimation ScalarAnimation_1_to_0p8_1()
        {
            const auto result = _scalarAnimation_1_to_0p8_1 = CreateScalarKeyFrameAnimation(0.0F, 1.0F, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.142857149F, 1.0F, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.271428585F, 0.800000012F, _cubicBezierEasingFunction_0);
            return result;
        }

        // - - - Layer aggregator
        // - - Layer: Check - PressedToHover
        // - ShapeGroup: Shape 1
        // TrimEnd
        ScalarKeyFrameAnimation TrimEndScalarAnimation_0_to_1()
        {
            const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.0F, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.714285731F, 0.0F, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.985714257F, 1.0F, _cubicBezierEasingFunction_0);
            return result;
        }

        // Layer aggregator
        ShapeVisual ShapeVisual_0()
        {
            const auto result = _c.CreateShapeVisual();
            result.Size({ 48.0F, 48.0F });
            const auto shapes = result.Shapes();
            // Layer: Check - PressedToHover
            shapes.Append(ContainerShape_0());
            // Layer: Check - PressedToNormal
            shapes.Append(ContainerShape_1());
            // Layer: Check - HoverToPressed
            shapes.Append(ContainerShape_2());
            // Layer: Check - HoverToNormal
            shapes.Append(SpriteShape_4());
            // Layer: Check - NormalToPressed
            shapes.Append(ContainerShape_3());
            // Layer: Check - NormalToHover
            shapes.Append(SpriteShape_6());
            return result;
        }

        StepEasingFunction HoldThenStepEasingFunction()
        {
            const auto result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
            result.IsFinalStepSingleFrame(true);
            return result;
        }

        StepEasingFunction StepThenHoldEasingFunction()
        {
            const auto result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
            result.IsInitialStepSingleFrame(true);
            return result;
        }

        // - Layer aggregator
        // Layer: Check - PressedToHover
        Vector2KeyFrameAnimation ShapeVisibilityAnimation_0()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.714285731F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
            return result;
        }

        // - Layer aggregator
        // Layer: Check - PressedToNormal
        Vector2KeyFrameAnimation ShapeVisibilityAnimation_1()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.571428597F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.714285731F, { 0.0F, 0.0F }, _holdThenStepEasingFunction);
            return result;
        }

        // - Layer aggregator
        // Layer: Check - HoverToPressed
        Vector2KeyFrameAnimation ShapeVisibilityAnimation_2()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.428571433F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.571428597F, { 0.0F, 0.0F }, _holdThenStepEasingFunction);
            return result;
        }

        // - Layer aggregator
        // Layer: Check - HoverToNormal
        Vector2KeyFrameAnimation ShapeVisibilityAnimation_3()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.285714298F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.428571433F, { 0.0F, 0.0F }, _holdThenStepEasingFunction);
            return result;
        }

        // - Layer aggregator
        // Layer: Check - NormalToPressed
        Vector2KeyFrameAnimation ShapeVisibilityAnimation_4()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.142857149F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.285714298F, { 0.0F, 0.0F }, _holdThenStepEasingFunction);
            return result;
        }

        // - Layer aggregator
        // Layer: Check - NormalToHover
        Vector2KeyFrameAnimation ShapeVisibilityAnimation_5()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.142857149F, { 0.0F, 0.0F }, _holdThenStepEasingFunction);
            return result;
        }

        static IGeometrySource2D CanvasGeometryToIGeometrySource2D(winrt::com_ptr<CanvasGeometry> geo)
        {
            return geo.as<IGeometrySource2D>();
        }

    public:
        Controls_01_Checkmark_AnimatedVisual(
            Compositor compositor,
            CompositionPropertySet themeProperties)
            : _c{compositor}
            , _themeProperties{themeProperties}
            , _reusableExpressionAnimation(compositor.CreateExpressionAnimation())
        {
            winrt::check_hresult(D2D1CreateFactory(D2D1_FACTORY_TYPE_SINGLE_THREADED, _d2dFactory.put()));
            const auto _ = Root();
        }

        void Close()
        {
            if (_root)
            {
                _root.Close();
            }
        }

        TimeSpan Duration() const
        {
            return TimeSpan{ c_durationTicks };
        }

        Visual RootVisual() const
        {
            return _root;
        }

        winrt::float2 Size() const
        {
            return { 48.0F, 48.0F };
        }

        static bool IsRuntimeCompatible()
        {
            return winrt::Windows::Foundation::Metadata::ApiInformation::IsApiContractPresent(L"Windows.Foundation.UniversalApiContract", 7);
        }
    };

    winrt::float4 Controls_01_Checkmark::ColorAsVector4(Color color)
    {
        return { static_cast<float>(color.R), static_cast<float>(color.G), static_cast<float>(color.B), static_cast<float>(color.A) };
    }

    CompositionPropertySet Controls_01_Checkmark::EnsureThemeProperties(Compositor compositor)
    {
        if (_themeProperties == nullptr)
        {
            _themeProperties = compositor.CreatePropertySet();
            _themeProperties.InsertVector4(L"Foreground", ColorAsVector4((Color)_themeForeground));
        }

        return _themeProperties;
    }

    Color Controls_01_Checkmark::Foreground()
    {
        return _themeForeground;
    }

    void Controls_01_Checkmark::Foreground(Color value)
    {
        _themeForeground = value;
        if (_themeProperties != nullptr)
        {
            _themeProperties.InsertVector4(L"Foreground", ColorAsVector4((Color)_themeForeground));
        }
    }

    winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual Controls_01_Checkmark::TryCreateAnimatedVisual(
        Compositor const& compositor,
        IInspectable& diagnostics)
    {
        const auto _ = EnsureThemeProperties(compositor);
        diagnostics = nullptr;

        if (Controls_01_Checkmark_AnimatedVisual::IsRuntimeCompatible())
        {
            return winrt::make<Controls_01_Checkmark_AnimatedVisual>(
                compositor,
                _themeProperties);
        }

        return nullptr;
    }

    double Controls_01_Checkmark::FrameToProgress(double frameNumber)
    {
        return frameNumber / 70.0;
    }

    winrt::Windows::Foundation::Collections::IMapView<hstring, double> Controls_01_Checkmark::Markers()
    {
        return winrt::single_threaded_map<winrt::hstring, double>(
            std::map<winrt::hstring, double>
            {
                { L"NormalToHover_Start", 0.0 },
                { L"NormalToHover_End", 0.128571428571429 },
                { L"NormalToPressed_Start", 0.142857142857143 },
                { L"NormalToPressed_End", 0.271428571428571 },
                { L"HoverToNormal_Start", 0.285714285714286 },
                { L"HoverToNormal_End", 0.414285714285714 },
                { L"HoverToPressed_Start", 0.428571428571429 },
                { L"HoverToPressed_End", 0.557142857142857 },
                { L"PressedToNormal_Start", 0.571428571428571 },
                { L"PressedToNormal_End", 0.7 },
                { L"PressedToHover_Start", 0.714285714285714 },
                { L"PressedToHover_End", 0.985714285714286 },
            }
        ).GetView();
    }

    void Controls_01_Checkmark::SetColorProperty(hstring const& propertyName, Color value)
    {
        if (propertyName == L"Foreground")
        {
            _themeForeground = value;
        }
        else
        {
            return;
        }

        if (_themeProperties != nullptr)
        {
            _themeProperties.InsertVector4(propertyName, ColorAsVector4(value));
        }
    }

    void Controls_01_Checkmark::SetScalarProperty(hstring const&, double)
    {
    }
